{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport matter from 'gray-matter';\nimport mdxPrism from 'mdx-prism';\nimport path from 'path';\nimport readingTime from 'reading-time';\nimport renderToString from 'next-mdx-remote/render-to-string';\nimport MDXComponents from '@/components/MDXComponents';\nconst root = process.cwd();\nexport async function getFiles(type) {\n  return fs.readdirSync(path.join(root, 'data', type));\n}\nexport async function getFileBySlug(type, slug) {\n  const source = slug ? fs.readFileSync(path.join(root, 'data', type, `${slug}.mdx`), 'utf8') : fs.readFileSync(path.join(root, 'data', `${type}.mdx`), 'utf8');\n  const {\n    data,\n    content\n  } = matter(source);\n  const mdxSource = await renderToString(content, {\n    components: MDXComponents,\n    mdxOptions: {\n      remarkPlugins: [require('remark-autolink-headings'), require('remark-slug'), require('remark-code-titles')],\n      rehypePlugins: [mdxPrism]\n    }\n  });\n  return {\n    mdxSource,\n    frontMatter: _objectSpread({\n      wordCount: content.split(/\\s+/gu).length,\n      readingTime: readingTime(content),\n      slug: slug || null\n    }, data)\n  };\n}\nexport async function getAllFilesFrontMatter(type) {\n  const files = fs.readdirSync(path.join(root, 'data', type));\n  return files.reduce((allPosts, postSlug) => {\n    const source = fs.readFileSync(path.join(root, 'data', type, postSlug), 'utf8');\n    const {\n      data\n    } = matter(source);\n    return [_objectSpread(_objectSpread({}, data), {}, {\n      slug: postSlug.replace('.mdx', '')\n    }), ...allPosts];\n  }, []);\n}","map":{"version":3,"sources":["/Users/withoutwax/Project/withoutwax.me/lib/mdx.js"],"names":["fs","matter","mdxPrism","path","readingTime","renderToString","MDXComponents","root","process","cwd","getFiles","type","readdirSync","join","getFileBySlug","slug","source","readFileSync","data","content","mdxSource","components","mdxOptions","remarkPlugins","require","rehypePlugins","frontMatter","wordCount","split","length","getAllFilesFrontMatter","files","reduce","allPosts","postSlug","replace"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AAEA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,EAAb;AAEA,OAAO,eAAeC,QAAf,CAAwBC,IAAxB,EAA8B;AACnC,SAAOX,EAAE,CAACY,WAAH,CAAeT,IAAI,CAACU,IAAL,CAAUN,IAAV,EAAgB,MAAhB,EAAwBI,IAAxB,CAAf,CAAP;AACD;AAED,OAAO,eAAeG,aAAf,CAA6BH,IAA7B,EAAmCI,IAAnC,EAAyC;AAC9C,QAAMC,MAAM,GAAGD,IAAI,GACff,EAAE,CAACiB,YAAH,CAAgBd,IAAI,CAACU,IAAL,CAAUN,IAAV,EAAgB,MAAhB,EAAwBI,IAAxB,EAA+B,GAAEI,IAAK,MAAtC,CAAhB,EAA8D,MAA9D,CADe,GAEff,EAAE,CAACiB,YAAH,CAAgBd,IAAI,CAACU,IAAL,CAAUN,IAAV,EAAgB,MAAhB,EAAyB,GAAEI,IAAK,MAAhC,CAAhB,EAAwD,MAAxD,CAFJ;AAIA,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBlB,MAAM,CAACe,MAAD,CAAhC;AACA,QAAMI,SAAS,GAAG,MAAMf,cAAc,CAACc,OAAD,EAAU;AAC9CE,IAAAA,UAAU,EAAEf,aADkC;AAE9CgB,IAAAA,UAAU,EAAE;AACVC,MAAAA,aAAa,EAAE,CACbC,OAAO,CAAC,0BAAD,CADM,EAEbA,OAAO,CAAC,aAAD,CAFM,EAGbA,OAAO,CAAC,oBAAD,CAHM,CADL;AAMVC,MAAAA,aAAa,EAAE,CAACvB,QAAD;AANL;AAFkC,GAAV,CAAtC;AAYA,SAAO;AACLkB,IAAAA,SADK;AAELM,IAAAA,WAAW;AACTC,MAAAA,SAAS,EAAER,OAAO,CAACS,KAAR,CAAc,OAAd,EAAuBC,MADzB;AAETzB,MAAAA,WAAW,EAAEA,WAAW,CAACe,OAAD,CAFf;AAGTJ,MAAAA,IAAI,EAAEA,IAAI,IAAI;AAHL,OAING,IAJM;AAFN,GAAP;AASD;AAED,OAAO,eAAeY,sBAAf,CAAsCnB,IAAtC,EAA4C;AACjD,QAAMoB,KAAK,GAAG/B,EAAE,CAACY,WAAH,CAAeT,IAAI,CAACU,IAAL,CAAUN,IAAV,EAAgB,MAAhB,EAAwBI,IAAxB,CAAf,CAAd;AAEA,SAAOoB,KAAK,CAACC,MAAN,CAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC1C,UAAMlB,MAAM,GAAGhB,EAAE,CAACiB,YAAH,CACbd,IAAI,CAACU,IAAL,CAAUN,IAAV,EAAgB,MAAhB,EAAwBI,IAAxB,EAA8BuB,QAA9B,CADa,EAEb,MAFa,CAAf;AAIA,UAAM;AAAEhB,MAAAA;AAAF,QAAWjB,MAAM,CAACe,MAAD,CAAvB;AAEA,WAAO,iCAEAE,IAFA;AAGHH,MAAAA,IAAI,EAAEmB,QAAQ,CAACC,OAAT,CAAiB,MAAjB,EAAyB,EAAzB;AAHH,QAKL,GAAGF,QALE,CAAP;AAOD,GAdM,EAcJ,EAdI,CAAP;AAeD","sourcesContent":["import fs from 'fs';\nimport matter from 'gray-matter';\nimport mdxPrism from 'mdx-prism';\nimport path from 'path';\nimport readingTime from 'reading-time';\nimport renderToString from 'next-mdx-remote/render-to-string';\n\nimport MDXComponents from '@/components/MDXComponents';\n\nconst root = process.cwd();\n\nexport async function getFiles(type) {\n  return fs.readdirSync(path.join(root, 'data', type));\n}\n\nexport async function getFileBySlug(type, slug) {\n  const source = slug\n    ? fs.readFileSync(path.join(root, 'data', type, `${slug}.mdx`), 'utf8')\n    : fs.readFileSync(path.join(root, 'data', `${type}.mdx`), 'utf8');\n\n  const { data, content } = matter(source);\n  const mdxSource = await renderToString(content, {\n    components: MDXComponents,\n    mdxOptions: {\n      remarkPlugins: [\n        require('remark-autolink-headings'),\n        require('remark-slug'),\n        require('remark-code-titles')\n      ],\n      rehypePlugins: [mdxPrism]\n    }\n  });\n\n  return {\n    mdxSource,\n    frontMatter: {\n      wordCount: content.split(/\\s+/gu).length,\n      readingTime: readingTime(content),\n      slug: slug || null,\n      ...data\n    }\n  };\n}\n\nexport async function getAllFilesFrontMatter(type) {\n  const files = fs.readdirSync(path.join(root, 'data', type));\n\n  return files.reduce((allPosts, postSlug) => {\n    const source = fs.readFileSync(\n      path.join(root, 'data', type, postSlug),\n      'utf8'\n    );\n    const { data } = matter(source);\n\n    return [\n      {\n        ...data,\n        slug: postSlug.replace('.mdx', '')\n      },\n      ...allPosts\n    ];\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}